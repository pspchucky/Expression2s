@name SHA256-PY
@inputs 
@outputs 
@persist I
@trigger 
#include "functions"
K = array("0x428a2f98", "0x71374491", "0xb5c0fbcf", "0xe9b5dba5",
  "0x3956c25b", "0x59f111f1", "0x923f82a4", "0xab1c5ed5",
  "0xd807aa98", "0x12835b01", "0x243185be", "0x550c7dc3",
  "0x72be5d74", "0x80deb1fe", "0x9bdc06a7", "0xc19bf174",
  "0xe49b69c1", "0xefbe4786", "0x0fc19dc6", "0x240ca1cc",
  "0x2de92c6f", "0x4a7484aa", "0x5cb0a9dc", "0x76f988da",
  "0x983e5152", "0xa831c66d", "0xb00327c8", "0xbf597fc7",
  "0xc6e00bf3", "0xd5a79147", "0x06ca6351", "0x14292967",
  "0x27b70a85", "0x2e1b2138", "0x4d2c6dfc", "0x53380d13",
  "0x650a7354", "0x766a0abb", "0x81c2c92e", "0x92722c85",
  "0xa2bfe8a1", "0xa81a664b", "0xc24b8b70", "0xc76c51a3",
  "0xd192e819", "0xd6990624", "0xf40e3585", "0x106aa070",
  "0x19a4c116", "0x1e376c08", "0x2748774c", "0x34b0bcb5",
  "0x391c0cb3", "0x4ed8aa4a", "0x5b9cca4f", "0x682e6ff3",
  "0x748f82ee", "0x78a5636f", "0x84c87814", "0x8cc70208",
  "0x90befffa", "0xa4506ceb", "0xbef9a3f7", "0xc67178f2")

  State = array("0x6a09e667", "0xbb67ae85", "0x3c6ef372", "0xa54ff53a", "0x510e527f", "0x9b05688c", "0x1f83d9ab", "0x5be0cd19")

function number rotr(X, Y)
{
return (X>>Y | X<<(32-Y))
}

function number rot(X, Y)
{
    return (X<<Y | X>>(32-Y))
}

function number r(X2, X7, X15, X16)
{
    return #[uint32()]# (rot(X2,15^rot(X2,13)^((X2)>>10)) + X7 + (rot(X15,25)^rot(X15,14)^((X15)>>3)) + X16)
}

function number sharound(A,B,C,D,E,F,G,H,X,K)
{
    T1 = H+(rot(E, 26)^rot(E, 21)^rot(E, 7))+(G^(E&(F^G)))+K+X
    T2 = (rot(A, 30)^rot(A, 19)^rot(A, 10))+((A&B)|(C&(A|B)))
    return ((D + T1)+(T1+T2))
}
#[function number partial(State, Merkle_end, Time, Difficulty, F)
{
    
}
def partial(state, merkle_end, time, difficulty, f):
	state2 = list(state)
	data = [merkle_end, time, difficulty]
	for i in xrange(3):
		(state2[~(i-4)&7], state2[~(i-8)&7]) = sharound(state2[(~(i-1)&7)],state2[~(i-2)&7],state2[~(i-3)&7],state2[~(i-4)&7],state2[~(i-5)&7],state2[~(i-6)&7],state2[~(i-7)&7],state2[~(i-8)&7],data[i],K[i])

	f[0] = uint32(data[0] + (rotr(data[1], 7) ^ rotr(data[1], 18) ^ (data[1] >> 3)))
	f[1] = uint32(data[1] + (rotr(data[2], 7) ^ rotr(data[2], 18) ^ (data[2] >> 3)) + 0x01100000)
	f[2] = uint32(data[2] + (rotr(f[0], 17) ^ rotr(f[0], 19) ^ (f[0] >> 10)))
	f[3] = uint32(0x11002000 + (rotr(f[1], 17) ^ rotr(f[1], 19) ^ (f[1] >> 10)))
	f[4] = uint32(0x00000280 + (rotr(f[0], 7) ^ rotr(f[0], 18) ^ (f[0] >> 3)))
	f[5] = uint32(f[0] + (rotr(f[1], 7) ^ rotr(f[1], 18) ^ (f[1] >> 3)))
	f[6] = uint32(state[4] + (rotr(state2[1], 6) ^ rotr(state2[1], 11) ^ rotr(state2[1], 25)) + (state2[3] ^ (state2[1] & (state2[2] ^ state2[3]))) + 0xe9b5dba5)
	f[7] = uint32((rotr(state2[5], 2) ^ rotr(state2[5], 13) ^ rotr(state2[5], 22)) + ((state2[5] & state2[6]) | (state2[7] & (state2[5] | state2[6]))))
	return state2

def calculateF(state, merkle_end, time, difficulty, f, state2):
		data = [merkle_end, time, difficulty]
		#W2
		f[0] = uint32(data[2])

		#W16
		f[1] = uint32(data[0] + (rotr(data[1], 7) ^ rotr(data[1], 18) ^
			(data[1] >> 3)))
		#W17
		f[2] = uint32(data[1] + (rotr(data[2], 7) ^ rotr(data[2], 18) ^
			(data[2] >> 3)) + 0x01100000)

		#2 parts of the first SHA round
		f[3] = uint32(state[4] + (rotr(state2[1], 6) ^
			rotr(state2[1], 11) ^ rotr(state2[1], 25)) +
			(state2[3] ^ (state2[1] & (state2[2] ^
			state2[3]))) + 0xe9b5dba5)
		f[4] = uint32((rotr(state2[5], 2) ^
			rotr(state2[5], 13) ^ rotr(state2[5], 22)) +
			((state2[5] & state2[6]) | (state2[7] &
			(state2[5] | state2[6]))))
]#
function array sha256(State:array, Data:array)
{
	Digest = State
	for(I=15,128){

			Data[I,number] = r(Data[(I-2),number], Data[(I-7),number], Data[(I-15),number], Data[(I-16),number])
		(Digest[((I-4)&7),number] + Digest[((I-8)&7),number]) == sharound(Digest[(((I-1)&7)),number],Digest[((I-2)&7),number],Digest[((I-3)&7),number],Digest[((I-4)&7),number],Digest[((I-5)&7),number],Digest[((I-6)&7),number],Digest[((I-7)&7),number],Digest[((I-8)&7),number],Data[I,number],K[I,number])

	Result = array()
	Result:insertString(1,Digest[0,string] + State[0,string])
	Result:insertString(2,Digest[1,string] + State[1,string])
Result:insertString(3,Digest[2,string] + State[2,string])
Result:insertString(4,Digest[3,string] + State[3,string])
Result:insertString(5,Digest[4,string] + State[4,string])
Result:insertString(6,Digest[5,string] + State[5,string])
Result:insertString(7,Digest[6,string] + State[6,string])
Result:insertString(8,Digest[7,string] + State[7,string])
	return Result
}

}
print((sha256(State,array("5a","5a","5a","5a","5a","5a","443","c31"))))
#[
def hash(midstate, merkle_end, time, difficulty, nonce):
	work = [[0] * 64][0]
	work[0]=merkle_end; work[1]=time; work[2]=difficulty; work[3]=nonce
	work[4]=0x80000000; work[5]=0x00000000; work[6]=0x00000000; work[7]=0x00000000
	work[8]=0x00000000; work[9]=0x00000000; work[10]=0x00000000; work[11]=0x00000000
	work[12]=0x00000000; work[13]=0x00000000; work[14]=0x00000000; work[15]=0x00000280

	state = sha256(midstate, work)

	work[0]=state[0]; work[1]=state[1]; work[2]=state[2]; work[3]=state[3]
	work[4]=state[4]; work[5]=state[5]; work[6]=state[6]; work[7]=state[7]
	work[8]=0x80000000; work[15]=0x00000100

	return sha256(STATE, work)
]#
